/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dpdm.storage_api.api;

import com.dpdm.storage_api.model.FileResponse;
import org.springframework.core.io.Resource;
import com.dpdm.storage_api.model.Signature;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-27T01:38:23.859Z[GMT]")
@Validated
public interface FileApi {

    @Operation(summary = "delete file", description = "", tags={ "File" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok") })
    @RequestMapping(value = "/{id}/file/{fileId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFile(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("fileId") String fileId);


    @Operation(summary = "get link", description = "", tags={ "File" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok", content = @Content(schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/{id}/file/{fileid}/dlink",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getDlink(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("fileid") String fileid);


    @Operation(summary = "get files", description = "", tags={ "File" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok", content = @Content(array = @ArraySchema(schema = @Schema(implementation = FileResponse.class)))) })
    @RequestMapping(value = "/{id}/files",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FileResponse>> getFiles(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "sign file", description = "operationId: signFile", tags={ "File" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(value = "/files/{fileid}/sign",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> signFile(@Parameter(in = ParameterIn.HEADER, description = "the files owner id" ,required=true,schema=@Schema()) @RequestHeader(value="ownerId", required=true) String ownerId, @Parameter(in = ParameterIn.PATH, description = "the files id", required=true, schema=@Schema()) @PathVariable("fileid") String fileid, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Signature body);


    @Operation(summary = "post file", description = "", tags={ "File" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok") })
    @RequestMapping(value = "/{id}/files",
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> uploadFile(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile filename);

}

