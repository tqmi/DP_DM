/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dpdm.gateway_api.controllers;

import com.dpdm.gateway_api.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-19T18:35:22.034933700+03:00[Europe/Bucharest]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /user/info : delete user in db
     * delete user details
     *
     * @return ok (status code 200)
     */
    @ApiOperation(value = "delete user in db", nickname = "deleteUser", notes = "delete user details", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok") })
    @DeleteMapping(
        value = "/user/info"
    )
    default ResponseEntity<Void> deleteUser() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/info : Get the user information
     * asd
     *
     * @return OK (status code 200)
     *         or user not in db, update info with PUT (status code 204)
     */
    @ApiOperation(value = "Get the user information", nickname = "getUserInfo", notes = "asd", response = User.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 204, message = "user not in db, update info with PUT") })
    @GetMapping(
        value = "/user/info",
        produces = { "applicatino/json" }
    )
    default ResponseEntity<User> getUserInfo() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/info : update user details in db
     * update user details
     *
     * @param user the users new details (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "update user details in db", nickname = "updateUser", notes = "update user details", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @PutMapping(
        value = "/user/info",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateUser(@ApiParam(value = "the users new details" ,required=true )  @Valid @RequestBody User user) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
