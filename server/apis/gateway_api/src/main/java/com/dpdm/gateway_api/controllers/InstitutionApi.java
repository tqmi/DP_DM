/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dpdm.gateway_api.controllers;

import com.dpdm.gateway_api.model.FileResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-18T19:45:07.825591900+03:00[Europe/Bucharest]")
@Validated
@Api(value = "institution", description = "the institution API")
public interface InstitutionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /institution/{id}/templates : get lsit of templates
     * asd
     *
     * @param id institutions id (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "get lsit of templates", nickname = "getInstitutionTemplates", notes = "asd", response = FileResponse.class, responseContainer = "List", tags={ "Institution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FileResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/institution/{id}/templates",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FileResponse>> getInstitutionTemplates(@ApiParam(value = "institutions id",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"fileid\" : \"fileid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /institution/{id}/templates : upload template
     * asd
     *
     * @param id institutions id (required)
     * @param fileResponse  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "upload template", nickname = "uploadInstitutionTemplate", notes = "asd", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Institution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @PutMapping(
        value = "/institution/{id}/templates",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> uploadInstitutionTemplate(@ApiParam(value = "institutions id",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody FileResponse fileResponse) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
