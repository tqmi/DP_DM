/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dpdm.gateway_api.controllers;

import com.dpdm.gateway_api.model.FileResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-18T19:45:07.825591900+03:00[Europe/Bucharest]")
@Validated
@Api(value = "files", description = "the files API")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /files/{fileid} : Get file link
     * Get the download link for the file
     *
     * @param fileid id string that was sent with the file (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get file link", nickname = "getDownloadLink", notes = "Get the download link for the file", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @GetMapping(
        value = "/files/{fileid}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getDownloadLink(@ApiParam(value = "id string that was sent with the file",required=true) @PathVariable("fileid") String fileid) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/myFiles : Returns a list of filenames,authors and download links
     * asd
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Returns a list of filenames,authors and download links", nickname = "getMyFiles", notes = "asd", response = FileResponse.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FileResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/files/myFiles",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FileResponse>> getMyFiles() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"fileid\" : \"fileid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /files/myFiles : Uploads the file to the stoarge bucket
     * asd
     *
     * @param filename  (optional)
     * @return OK (status code 200)
     *         or invalid request (status code 400)
     */
    @ApiOperation(value = "Uploads the file to the stoarge bucket", nickname = "uploadFile", notes = "asd", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "invalid request") })
    @PostMapping(
        value = "/files/myFiles",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> uploadFile(@ApiParam(value = "") @Valid @RequestPart(value = "filename", required = false) MultipartFile filename) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
