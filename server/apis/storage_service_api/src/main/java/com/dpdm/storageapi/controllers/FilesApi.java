/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dpdm.storageapi.controllers;

import com.dpdm.storageapi.model.FileResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-12T19:32:41.978191100+03:00[Europe/Bucharest]")
@Validated
@Api(value = "files", description = "the files API")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /files : Returns a list of filenames,authors and download links
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Returns a list of filenames,authors and download links", nickname = "filesGet", notes = "", response = FileResponse.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FileResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/files",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FileResponse>> filesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"download_link\" : \"http://example.com/aeiou\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /files : Uploads the file to the stoarge bucket
     *
     * @param userToken an access token for firebase to get user info (required)
     * @param body The file (required)
     * @return OK (status code 200)
     *         or invalid request (status code 400)
     */
    @ApiOperation(value = "Uploads the file to the stoarge bucket", nickname = "filesPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "invalid request") })
    @PostMapping(
        value = "/files",
        consumes = { "application/form-data" }
    )
    default ResponseEntity<Void> filesPost(@ApiParam(value = "an access token for firebase to get user info" ,required=true) @RequestHeader(value="userToken", required=true) String userToken,@ApiParam(value = "The file" ,required=true )  @Valid @RequestBody org.springframework.core.io.Resource body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
